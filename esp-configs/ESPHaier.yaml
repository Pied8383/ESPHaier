substitutions:
  name: "esphaier"
  friendly_name: "ESPHaier"
  room: ""
  device_description: "ESPHome Haier AC control unit"
  project_name: "Peter.ESPHaier V1"
  project_version: "v0.1.1"
  wifi_fast_connect: "false"
  ipv6_enable: "false"

  add_mac_suffix: "true"
  import_full_config: "false"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: "${add_mac_suffix}"
  comment: "${device_description}"
  area: "${room}"
  project:
    name: "${project_name}"
    version: "${project_version}"

esp32:
  board: esp32-s3-devkitc-1
  variant: ESP32S3
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

ota:
  - platform: esphome

wifi:
  fast_connect: "${wifi_fast_connect}"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap: {}

captive_portal:

dashboard_import:
  package_import_url: github://Pied8383/ESPHaier/esp-configs/ESPHaier.yaml
  import_full_config: ${import_full_config}

web_server:
  port: 80

esp32_improv:
  authorizer: none

uart:
  - id: ac_port
    tx_pin: GPIO21
    rx_pin: GPIO20
    baud_rate: 9600

sensor:
  - platform: uptime
    type: seconds
    name: Uptime Sensor
    update_interval: 2s

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 2s

climate:
  - platform: haier
    id: haier_ac
    protocol: hon
    name: Haier AC
    uart_id: ac_port
    wifi_signal: true
    display: true
    visual:
      min_temperature: 16 °C
      max_temperature: 30 °C
      temperature_step: 1 °C
    supported_modes:
      - "OFF"
      - HEAT_COOL
      - COOL
      - HEAT
      - DRY
      - FAN_ONLY
    supported_swing_modes:
      - "OFF"
      - VERTICAL
      - HORIZONTAL
      - BOTH
    supported_presets:
      - AWAY
      - BOOST
      - SLEEP

light:
  - platform: esp32_rmt_led_strip
    chipset: WS2812
    id: status_led
    pin: 38
    num_leds: 1
    rmt_channel: 0
    rgb_order: RGB
    name: "RGB LED"
    restore_mode: ALWAYS_OFF
    internal: True
    default_transition_length: 0.0s
    brightness: 0.3

    # Declare status sensors
binary_sensor:
  - platform: status
    name: "Status"
    id: esp_status

interval:
  - interval: 1s
    then:
      - lambda: |-
          if (!WiFi.is_connected()) {
            // RED: No WiFi
            id(status_led).turn_on();
            id(status_led).make_call().set_rgb(1.0, 0.0, 0.0).perform();
          } else if (WiFi.is_connected() && !id(api).is_connected()) {
            // YELLOW: WiFi ok, API disconnected
            id(status_led).turn_on();
            id(status_led).make_call().set_rgb(1.0, 1.0, 0.0).perform();
          } else {
            // GREEN: All good
            id(status_led).turn_on();
            id(status_led).make_call().set_rgb(0.0, 1.0, 0.0).perform();
          }
